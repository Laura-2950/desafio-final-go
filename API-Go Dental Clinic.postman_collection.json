{
	"info": {
		"_postman_id": "d5374540-0d82-4b23-90e3-050ffda366da",
		"name": "API-Go Dental Clinic",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17974445"
	},
	"item": [
		{
			"name": "Dentist",
			"item": [
				{
					"name": "Get Dentist By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"const dentist = response;\r",
									"\r",
									"pm.test(\"Get Dentist By ID\", () => {\r",
									"    pm.expect(dentist).to.be.an(\"object\");\r",
									"    pm.expect(dentist.id).to.eql(2);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/dentists/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"dentists",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Dentist By Nonexistent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Dentist non-existent\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.message).to.eql(\"dentist_id 200 not found\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/dentists/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"dentists",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "200"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Dentist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"const dentist = response;\r",
									"\r",
									"pm.test(\"Create New Dentist\", ()=>{\r",
									"    pm.expect(dentist).to.be.an(\"object\");\r",
									"    pm.expect(dentist.name).to.eql(\"Prueba\");\r",
									"    pm.expect(dentist).to.have.property(\"id\").that.exists;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Prueba\",\r\n    \"last_name\": \"Prueba\",\r\n    \"registration_number\": \"62840\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/dentists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"dentists"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Dentist without required field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Create New Dentist without required field\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.error).to.eql(\"invalid dentist\");\r",
									"    pm.expect(response).to.not.have.property(\"id\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "my_token",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Prueba\",\r\n    \"last_name\": \"Prueba\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/dentists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"dentists"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Dentist By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Delete Product by id\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response).to.eql(\"dentist removed successfully\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "my_token",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/dentists/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"dentists",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "21"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Dentist By Nonexistent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Delete Product by noneexistet ID\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.message).to.contain(\"nonexistent dentist with id\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "my_token",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/dentists/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"dentists",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "300"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Dentist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Update Name and Last Name Dentist\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.name).to.eql(\"Test\");\r",
									"    pm.expect(response.id).to.eql(2);\r",
									"    pm.expect(response.registration_number).to.eql(\"67890\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 3,\r\n    \"name\": \"Test\",\r\n    \"last_name\": \"Test\",\r\n    \"registration_number\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/dentists/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"dentists",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Name Dentist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Update Name Dentist\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.name).to.eql(\"Name\");\r",
									"    pm.expect(response.id).to.eql(2);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Name\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/dentists/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"dentists",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}