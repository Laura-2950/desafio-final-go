{
	"info": {
		"_postman_id": "d5374540-0d82-4b23-90e3-050ffda366da",
		"name": "API-Go Dental Clinic",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17974445"
	},
	"item": [
		{
			"name": "Dentist",
			"item": [
				{
					"name": "Get Dentist By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"const dentist = response;\r",
									"\r",
									"pm.test(\"Get Dentist By ID\", () => {\r",
									"    pm.expect(dentist).to.be.an(\"object\");\r",
									"    pm.expect(dentist.id).to.eql(2);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/dentists/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"dentists",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Dentist By Nonexistent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Dentist non-existent\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.message).to.eql(\"dentist_id 200 not found\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/dentists/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"dentists",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "200"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Dentist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"const dentist = response;\r",
									"\r",
									"pm.test(\"Create New Dentist\", ()=>{\r",
									"    pm.expect(dentist).to.be.an(\"object\");\r",
									"    pm.expect(dentist.name).to.eql(\"Prueba\");\r",
									"    pm.expect(dentist).to.have.property(\"id\").that.exists;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Prueba\",\r\n    \"last_name\": \"Prueba\",\r\n    \"registration_number\": \"6284051665\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/dentists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"dentists"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Dentist without required field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Create New Dentist without required field\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.message).to.eql(\"invalid body\");\r",
									"    pm.expect(response).to.not.have.property(\"id\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "my_token",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Prueba\",\r\n    \"last_name\": \"Prueba\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/dentists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"dentists"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Dentist By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Delete dentist by id\", ()=>{\r",
									"    //pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response).to.eql(\"dentist removed successfully\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "my_token",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/dentists/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"dentists",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "21"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Dentist By ID With Shift",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Delete dentist by id with shift\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.Message).to.contain(\"a foreign key constraint fails\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "my_token",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/dentists/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"dentists",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Dentist By Nonexistent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Delete dentist by noneexistet ID\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.message).to.contain(\"not found\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "my_token",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/dentists/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"dentists",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "300"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Dentist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Update Name and Last Name Dentist\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.name).to.eql(\"Test\");\r",
									"    pm.expect(response.id).to.eql(2);\r",
									"    pm.expect(response.registration_number).to.eql(\"67890\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 3,\r\n    \"name\": \"Test\",\r\n    \"last_name\": \"Test\",\r\n    \"registration_number\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/dentists/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"dentists",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Name Dentist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Update Name Dentist\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.name).to.eql(\"Name\");\r",
									"    pm.expect(response.id).to.eql(2);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Name\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/dentists/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"dentists",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Patient",
			"item": [
				{
					"name": "Get Patient By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Get Patient By ID\", () => {\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.id).to.eql(2);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/patients/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"patients",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Patient By Nonexistent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Patient non-existent\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.message).to.eql(\"patient_id 200 not found\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/patients/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"patients",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "200"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Create New Patient\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.name).to.eql(\"Prueba\");\r",
									"    pm.expect(response).to.have.property(\"id\").that.exists;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Prueba\",\r\n    \"last_name\": \"Prueba\",\r\n    \"address\": \"Prueba\",\r\n    \"dni\": \"10765593\",\r\n    \"registration_date\": \"20/03/2023\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/patients",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Patient without required field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Create New Patient without required field\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.message).to.eql(\"invalid body\");\r",
									"    pm.expect(response).to.not.have.property(\"id\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "my_token",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Prueba\",\r\n    \"last_name\": \"Prueba\",\r\n    \"address\": \"Prueba\",\r\n    \"dni\": \"32768532\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/patients",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Patients By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Delete Patient by id\", ()=>{\r",
									"    pm.expect(response).to.eql(\"patient removed successfully\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "my_token",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/patients/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"patients",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "21"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Patients By ID With Shift",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Delete patient by id with shift\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.Message).to.contain(\"a foreign key constraint fails\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "my_token",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/patients/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"patients",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Patient By Nonexistent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Delete Patient by noneexistet ID\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.message).to.contain(\"not found\");\r",
									"    pm.expect(response.code).to.equal(\"bad_request\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "my_token",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/patients/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"patients",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "300"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Update Name,Last Name and Address Patient\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.name).to.eql(\"Test\");\r",
									"    pm.expect(response.id).to.eql(2);\r",
									"    pm.expect(response.dni).to.eql(\"987654321\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 3,\r\n    \"name\": \"Test\",\r\n    \"last_name\": \"Test\",\r\n    \"address\": \"Test\",\r\n    \"dni\": \"Test\",\r\n    \"registration_date\": \"06/06/2023\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/patients/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"patients",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Name Patients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Update Name Patient\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.name).to.eql(\"Patient\");\r",
									"    pm.expect(response.id).to.eql(2);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Patient\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/patients/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"patients",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Shift",
			"item": [
				{
					"name": "Get Shift By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Get Shift by ID\", () => {\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.id).to.eql(2);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/shifts/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"shifts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Shift By Nonexistent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Get Shift non-existent\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.message).to.contain(\"not found\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/shifts/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"shifts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "200"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Shift",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Create New Shift\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.date_hour).to.eql(\"01/07/2023 17:00\");\r",
									"    pm.expect(response).to.have.property(\"id\").that.exists;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"patient\":2,\r\n    \"dentist\": 2,\r\n    \"date_hour\": \"01/07/2023 17:00\",\r\n    \"description\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/shifts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"shifts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Shift with Patient DNI and Code Dentist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Create New Shift with Patient DNI and Dentist Code\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.date_hour).to.eql(\"20/08/2023 09:20\");\r",
									"    pm.expect(response).to.have.property(\"id\").that.exists;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"patient_dni\":\"987321654\",\r\n    \"dentist_registration_number\": \"89012\",\r\n    \"date_hour\": \"20/08/2023 09:20\",\r\n    \"description\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/shifts/code",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"shifts",
								"code"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Shift without required field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Create New Shift without required field\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.message).to.eql(\"invalid body\");\r",
									"    pm.expect(response).to.not.have.property(\"id\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "my_token",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"dentist\": 2,\r\n    \"date_hour\": \"20/09/2023 09:20:00\",\r\n    \"description\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/shifts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"shifts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Shift By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Delete Shift by id\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response).to.eql(\"shift removed successfully\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "my_token",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/shifts/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"shifts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Shift By Nonexistent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Delete Shift by noneexistet ID\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.message).to.contain(\"not found\");\r",
									"    pm.expect(response.code).to.equal(\"bad_request\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "my_token",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/shifts/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"shifts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "300"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Shift",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Update patient, dentist, date_hour and description Shift\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.description).to.eql(\"Test\");\r",
									"    pm.expect(response.id).to.eql(2);\r",
									"    pm.expect(response.dentist).to.eql(15);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 2,\r\n    \"patient\": 3,\r\n    \"dentist\": 15,\r\n    \"date_hour\": \"20/07/2023 14:20\",\r\n    \"description\": \"Test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/shifts/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"shifts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Patient in Shift",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Update patient on Shift\", ()=>{\r",
									"    pm.expect(response).to.be.an(\"object\");\r",
									"    pm.expect(response.patient).to.eql(15);\r",
									"    pm.expect(response.id).to.eql(2);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"patient\":15\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/shifts/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"shifts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}